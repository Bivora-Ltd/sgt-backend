openapi: 3.0.3
info: 
  title: StreetGotTalent
  description: API for StreetGotTalent application
  version: 1.0.0
  contact:
    email: ckamsi04@gmail.com
servers:
  - url: https://api.streetgottalent.com/api/v1

schemes: [https]

tags:
  - name: season
    description: API endpoints related to seasons
  - name: contestant
    description: API endpoints related to contestants
  - name: payment
    description: API endpoints related to payments
  - name: admin
    description: API endpoints related to admin operations
  - name: streetFood
    description: API endpoints related to street food

paths:
  /seasons/current:
    get:
      tags:
        - season
      summary: Get the current season
      responses:
        '200':
          description: Successfully retrieved the current season
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Season'
        '404':
          description: No current season found

  /seasons:
    get:
      tags:
        - season
      summary: Get all seasons
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved list of seasons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Season'
        '401':
          description: Unauthorized
    post:
      tags:
        - season
      summary: Create a new season
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 'Season 1'
                application_deadline:
                  type: string
                  format: date-time
                  example: '2024-12-31T23:59:59Z'
                reg_fee:
                  type: number
                  example: 5000
              required:
                - title
                - application_deadline
                - reg_fee
      responses:
        '201':
          description: Season created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Season'
        '400':
          description: Missing required fields
        '401':
          description: Unauthorized

  /seasons/advance:
    post:
      tags:
        - season
      summary: Advance to the next season
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully advanced to the next season
        '401':
          description: Unauthorized
        '400':
          description: Bad request or unable to advance

  /contestants:
    get:
      tags:
        - contestant
      summary: Get all contestants
      parameters:
        - in: query
          name: seasonId
          schema:
            type: string
          required: false
          description: The season ID to filter contestants by
      responses:
        '200':
          description: Successfully retrieved list of contestants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contestant'
    post:
      tags:
        - contestant
      summary: Create a new contestant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contestant'
      responses:
        '201':
          description: Contestant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contestant'
  /payments:
    get:
      tags:
        - payment
      summary: Get all payments
      responses:
        '200':
          description: Successfully retrieved list of payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
    post:
      tags:
        - payment
      summary: Create a new payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
  /streetFood:
    get:
      tags:
        - streetFood
      summary: Get all street foods
      responses:
        '200':
          description: Successfully retrieved list of street foods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StreetFood'
    post:
      tags:
        - streetFood
      summary: Create a new street food item
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreetFood'
      responses:
        '201':
          description: Street food item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreetFood'
  /admins:
    get:
      tags:
        - admin
      summary: Get all admins
      responses:
        '200':
          description: Successfully retrieved list of admins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'
    post:
      tags:
        - admin
      summary: Create a new admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
      responses:
        '201':
          description: Admin created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    StreetFood:
      type: object
      properties:
        id:
          type: string
          example: '60c72b2f4f1a4c1d88f8e8e8'
        name:
          type: string
          example: 'Jollof Rice'
        imageUrl:
          type: string
          example: 'https://example.com/image.jpg'
        price:
          type: number
          example: 500
    Season:
      type: object
      properties:
        id:
          type: string
          example: '60c72b2f4f1a4c1d88f8e8e8'
        title:
          type: string
          example: 'Season 1'
        current:
          type: boolean
          example: true
        limit:
          type: number
          example: 100
        applicationDeadLine:
          type: string
          format: date-time
          example: '2024-12-31T23:59:59Z'
        registrationFee:
          type: number
          example: 5000
        status:
          type: string
          example: 'audition'
        acceptance:
          type: boolean
          example: true
    Payment:
      type: object
      properties:
        id:
          type: string
          example: '60c72b2f4f1a4c1d88f8e8e8'
        amount:
          type: number
          example: 10000
        paymentFor:
          type: string
          example: 'registration'
        name:
          type: string
          example: 'Jane Doe'
        email:
          type: string
          example: 'janedoe@example.com'
        season:
          type: string
          example: '60c72b2f4f1a4c1d88f8e8e8'
    Contestant:
      type: object
      properties:
        id:
          type: string
          example: '60c72b2f4f1a4c1d88f8e8e8'
        name:
          type: string
          example: 'John Doe'
        imageUrl:
          type: string
          example: 'https://example.com/image.jpg'
        performanceType:
          type: string
          example: 'Singing'
        socials:
          type: object
          properties:
            tiktok:
              type: string
              example: 'https://tiktok.com/@johndoe'
            instagram:
              type: string
              example: 'https://instagram.com/johndoe'
        email:
          type: string
          example: 'johndoe@example.com'
        votes:
          type: number
          example: 100
        season:
          type: string
          example: '60c72b2f4f1a4c1d88f8e8e8'
        group:
          type: string
          example: 'Group A'
        status:
          type: string
          example: 'audition'
        phoneNumber:
          type: string
          example: '08012345678'
    Admin:
      type: object
      properties:
        id:
          type: string
          example: '60c72b2f4f1a4c1d88f8e8e8'
        adminName:
          type: string
          example: 'Admin User'
        email:
          type: string
          example: 'admin@example.com'
        password:
          type: string
          example: 'password123'